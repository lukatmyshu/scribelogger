/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef scribe_TYPES_H
#define scribe_TYPES_H

#include <Thrift.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

#include "fb303_types.h"


namespace scribe { namespace thrift {

enum ResultCode {
  OK,
  TRY_LATER
};

class LogEntry {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  LogEntry() : category(""), message("") {
  }

  virtual ~LogEntry() throw() {}

  std::string category;
  std::string message;

  struct __isset {
    __isset() : category(false), message(false) {}
    bool category;
    bool message;
  } __isset;

  bool operator == (const LogEntry & rhs) const
  {
    if (!(category == rhs.category))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const LogEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogEntry & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
